package LeetCode;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
/*
 * 先将数组排序，固定第一个元素i，然后从i+1向后，以及数组尾部向前，寻找和为-nums[i]的三元组。
 * 注意避免重复
 */
public class ThreeSum15 {
	public List<List<Integer>> threeSum(int[] nums) {
		List<List<Integer>> result = new ArrayList<List<Integer>>();
		Arrays.sort(nums);
		for(int i = 0; i<nums.length-2; i++){		 //第一个元素
			if(i>0 && nums[i]==nums[i-1]) continue;  //避免存入重复triplet
			int j = i+1;                     		 //第二个元素
			int k = nums.length-1;          		 //第三个元素
			while(j<k){
				if(nums[j] == nums[j-1] && j>i+1){   //避免存入重复triplet
					j++;
				}else if(nums[j]+nums[k] == -nums[i]){
					ArrayList<Integer> triplet = new ArrayList<Integer>();
					triplet.add(nums[i]);
					triplet.add(nums[j]);
					triplet.add(nums[k]);
					result.add(triplet);
					j++;
					k--;
				}else if(nums[j]+nums[k] > -nums[i]){
					k--;
				}else{
					j++;
				}
			}
		}
		return result;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(new ThreeSum15().threeSum(new int[]{-2,0,0,2,2}));
	}

}
